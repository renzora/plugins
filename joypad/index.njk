
<div class='w-full fixed bottom-32'>

<div class='relative p-4 flex items-center justify-between w-full'>
  <!-- Joystick -->
  <div id="joystick-container" class="relative w-32 h-32 rounded-full border-2 border-yellow-500 bg-gradient-to-b from-gray-800 to-gray-600 shadow-inner flex items-center justify-center touch-none select-none pointer-events-auto ml-[10%]">
    <div id="joystick-handle" 
       class="absolute w-16 h-16 rounded-full bg-[radial-gradient(circle_at_top_left,_#ffc107,_#ff9800)] 
              touch-none cursor-grab select-none 
              shadow-[0_5px_10px_rgba(0,0,0,0.5),inset_0_2px_4px_rgba(255,255,255,0.2)] 
              border border-[rgba(255,255,255,0.3)] transition-none">
    </div>
  </div>

  <!-- Buttons -->
  <div id="joypad-buttons" class="absolute right-0 flex items-center justify-center w-48 h-48 mr-[5%]">
    <button id="button-y" class="absolute top-4 left-1/2 transform -translate-x-1/2 w-14 h-14 bg-[linear-gradient(to_bottom,#ff9800,#ffc107)] border-2 border-white rounded-full text-lg font-bold text-gray-900 flex items-center justify-center cursor-pointer shadow-[0_4px_6px_rgba(0,0,0,0.3)] hover:shadow-lg active:shadow-inner active:scale-95 transition-transform">
      Y
    </button>
    <button id="button-x" class="absolute left-4 top-1/2 transform -translate-y-1/2 w-14 h-14 bg-[linear-gradient(to_bottom,#ff9800,#ffc107)] border-2 border-white rounded-full text-lg font-bold text-gray-900 flex items-center justify-center cursor-pointer shadow-[0_4px_6px_rgba(0,0,0,0.3)] hover:shadow-lg active:shadow-inner active:scale-95 transition-transform">
      X
    </button>
    <button id="button-b" class="absolute right-4 top-1/2 transform -translate-y-1/2 w-14 h-14 bg-[linear-gradient(to_bottom,#ff9800,#ffc107)] border-2 border-white rounded-full text-lg font-bold text-gray-900 flex items-center justify-center cursor-pointer shadow-[0_4px_6px_rgba(0,0,0,0.3)] hover:shadow-lg active:shadow-inner active:scale-95 transition-transform">
      B
    </button>
    <button id="button-a" class="absolute bottom-4 left-1/2 transform -translate-x-1/2 w-14 h-14 bg-[linear-gradient(to_bottom,#ff9800,#ffc107)] border-2 border-white rounded-full text-lg font-bold text-gray-900 flex items-center justify-center cursor-pointer shadow-[0_4px_6px_rgba(0,0,0,0.3)] hover:shadow-lg active:shadow-inner active:scale-95 transition-transform">
      A
    </button>
  </div>
</div>
</div>
</div>


  <script>
window[id] = {
    id: id,
    isDragging: false, // Track whether the joystick is being dragged

    start: function() {
        this.initJoystick();
        this.initButtons();
    },

    initJoystick: function() {
        const joystickContainer = document.getElementById("joystick-container");
        const joystickHandle = document.getElementById("joystick-handle");
        const gameCanvas = game.canvas; // Reference to the game canvas

        const containerRect = joystickContainer.getBoundingClientRect();
        const containerCenter = {
            x: containerRect.left + containerRect.width / 2,
            y: containerRect.top + containerRect.height / 2
        };
        const maxDistance = containerRect.width / 2;

        const disableCanvasClicks = () => {
            if (gameCanvas) gameCanvas.style.pointerEvents = "none";
        };

        const enableCanvasClicks = () => {
            if (gameCanvas) gameCanvas.style.pointerEvents = "auto";
        };

        const updateJoystickPosition = (event) => {
    if (!this.isDragging) return;

    input.updateInputMethod('mobile');

    event.preventDefault();

    const containerRect = joystickContainer.getBoundingClientRect();
    const containerCenter = {
        x: containerRect.left + containerRect.width / 2,
        y: containerRect.top + containerRect.height / 2
    };
    const maxDistance = containerRect.width / 2;

    const { clientX, clientY } = event.touches ? event.touches[0] : event;

    const deltaX = clientX - containerCenter.x;
    const deltaY = clientY - containerCenter.y;

    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const angle = Math.atan2(deltaY, deltaX);

    const clampedDistance = Math.min(distance, maxDistance);

    const clampedX = Math.cos(angle) * clampedDistance;
    const clampedY = Math.sin(angle) * clampedDistance;

    joystickHandle.style.transform = `translate(${clampedX}px, ${clampedY}px)`;

    const normalizedX = (clampedX / maxDistance).toFixed(2);
    const normalizedY = (clampedY / maxDistance).toFixed(2);

    input.handleLeftAxes([parseFloat(normalizedX), parseFloat(normalizedY)]);
};


        const resetJoystick = () => {
            this.isDragging = false;
            enableCanvasClicks();

            joystickHandle.style.transition = "transform 0.1s ease";
            joystickHandle.style.transform = "translate(0, 0)";
            input.handleLeftAxes([0, 0]);

            setTimeout(() => {
                joystickHandle.style.transition = "none";
            }, 100);
        };

        joystickHandle.addEventListener("mousedown", (event) => {
            event.preventDefault();
            this.isDragging = true;
            disableCanvasClicks();
        });

        joystickHandle.addEventListener("touchstart", (event) => {
            event.preventDefault();
            this.isDragging = true;
            disableCanvasClicks();
        });

        document.addEventListener("mousemove", (event) => updateJoystickPosition.call(this, event));
        document.addEventListener("touchmove", (event) => updateJoystickPosition.call(this, event));

        document.addEventListener("mouseup", () => resetJoystick.call(this));
        document.addEventListener("touchend", () => resetJoystick.call(this));
    },

    initButtons: function() {
        const buttons = {
            a: document.getElementById("button-a"),
            b: document.getElementById("button-b"),
            x: document.getElementById("button-x"),
            y: document.getElementById("button-y"),
        };

        Object.entries(buttons).forEach(([key, button]) => {
            button.addEventListener("mousedown", (event) => {
                event.stopPropagation();
                input[`gamepad${key.toUpperCase()}ButtonPressed`]();
            });

            button.addEventListener("mouseup", (event) => {
                event.stopPropagation();
                input[`gamepad${key.toUpperCase()}ButtonReleased`]();
            });

            button.addEventListener("touchstart", (event) => {
                event.stopPropagation();
                input[`gamepad${key.toUpperCase()}ButtonPressed`]();
            });

            button.addEventListener("touchend", (event) => {
                event.stopPropagation();
                input[`gamepad${key.toUpperCase()}ButtonReleased`]();
            });
        });
    },

    unmount: function() {
        const joystickContainer = document.getElementById("joystick-container");
        const joystickHandle = document.getElementById("joystick-handle");

        joystickHandle.removeEventListener("mousedown", this.startDragging);
        joystickHandle.removeEventListener("touchstart", this.startDragging);
        document.removeEventListener("mousemove", this.updateJoystickPosition);
        document.removeEventListener("touchmove", this.updateJoystickPosition);
        document.removeEventListener("mouseup", this.resetJoystick);
        document.removeEventListener("touchend", this.resetJoystick);

        console.log("Joypad unmounted");
    }
};
</script>