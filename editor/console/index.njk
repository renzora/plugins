{% if auth %}
<div id='console_window' class='window fixed top-0 left-0 h-screen w-screen bg-[#152032] transition-transform duration-300 ease-in-out -translate-x-full' style="border-radius: 0;" data-drag="false">
   <div id="tabs" class="console_window_tab_buttons fixed top-0 left-0 h-full bg-[#1c3660] flex flex-col w-[48px] space-y-2 py-4 transition-transform duration-300 ease-in-out border-r-2 border-r-[#151a23]" style="margin-top: -1px;"></div>
  
  <div class='relative flex-1 window_body' style="max-height: 99%;">
    <div class="flex w-full bg-[#152032] h-full">
      <div class='flex-1'>
        <div id="console_window_content" class="text-white overflow-y-auto p-2 h-full"></div>
      </div>
    </div>
  </div>
  </div>

<script>
window[id] = {
    id: id,
    isOpen: false,
    currentTabIndex: 0,
    eventListeners: [],
    tab_name: null,
    allowToggle: true,
    iconPositions: {
        globe: 0,
        inventory: 1,
        cloud: 2,
        lightbulb: 3,
        music: 4,
        script: 5,
        key: 6,
        info: 7,
        settings: 10,
        full_screen: 11
    },

    start: function() {
        this.load_tab_buttons();
        this.toggleConsoleWindow(false);
        this.bindGamepadButtons();

        game.canvas.addEventListener('click', function(event) {
                if (this.isOpen) {
                    this.toggleConsoleWindow();
                }
            });
    },

    unmount: function() {
        this.eventListeners.forEach(({ element, event, handler }) => {
            element.removeEventListener(event, handler);
        });
        this.eventListeners = [];
        this.unmountCurrentTab();
        assets.unload('console_window_icons');
        console.log("All event listeners have been removed.");
    },

    bindGamepadButtons: function() {
        this.bButton = gamepad.throttle(this.bButton.bind(this), 200);
        this.upButton = gamepad.throttle(this.upButton.bind(this), 200);
        this.downButton = gamepad.throttle(this.downButton.bind(this), 200);
    },

  setupTabIcons: function() {
    const buttons = document.querySelectorAll('#console_window .console_tab');
    buttons.forEach(button => {
      const iconDiv = button.querySelector('div');
      if (!iconDiv) return;

      const iconName = iconDiv.classList[0];
      if (!iconName) return;

      this.setTabIcon(button, iconDiv, iconName);
    });
  },

    setTabIcon: function(button, iconDiv, iconName) {
        const iconSprite = assets.use('console_window_icons');
        if (!iconSprite) return;
        const iconIndex = this.iconPositions[iconName];
        if (typeof iconIndex === 'undefined') {
            console.warn(`No icon mapping found for: ${iconName}`);
            return;
        }
        const canvas = document.createElement('canvas');
        canvas.width = 32;
        canvas.height = 32;
        const ctx = canvas.getContext('2d');
        const offsetX = iconIndex * 32;
        ctx.drawImage(iconSprite, offsetX, 0, 32, 32, 0, 0, 32, 32);
        button.removeChild(iconDiv);
        button.appendChild(canvas);
    },

    bButton: function() {
        console.log("b button pressed from console_window");
        this.toggleConsoleWindow();
    },

    upButton: function() {
        console.log("up button pressed from console_window");
        this.navigateTabs('up');
    },

    downButton: function() {
        console.log("down button pressed from console_window");
        this.navigateTabs('down');
    },

    load_tab_buttons: function(id) {
        assets.preload([{ name: 'console_window_icons', path: 'plugins/editor/console/icons.png' }]);
        console.log(id);
        ui.ajax({
          method: 'GET',
          url: `plugins/editor/console/tabs.njk`,
          success: function (data) {
            ui.html('.console_window_tab_buttons', data, 'replace');
            console_window.setupTabListeners();
            console_window.setupTabIcons();
          },
          error: function (err) {
            console.error("Failed to load content for tab:", target, err);
            contentDiv.innerHTML = `<div class="error">Failed to load content. Please try again later.</div>`;
          }
        });
      },

toggleConsoleWindow: function(toggle = true, tabName = null) {  
    const consoleElement = document.getElementById('console_window');
    const tabsElement = document.getElementById('tabs');

    if (toggle) {
        if (!this.allowToggle && this.isOpen) {
            console.log("Console window is already open and cannot be closed.");
            return;
        }
        this.isOpen = !this.isOpen;
    }

    if (this.isOpen) {
        this.showConsoleWindow(consoleElement, tabsElement);
        this.activateCurrentTab();
    } else {
        this.hideConsoleWindow(consoleElement, tabsElement);
    }

    game.resizeCanvas();
},


showConsoleWindow: function(consoleElement, tabsElement) {
    console.log(consoleElement);
    consoleElement.classList.remove('-translate-x-full');
    consoleElement.classList.add('translate-x-0');
    consoleElement.style.marginLeft = '46px';
    tabsElement.style.marginLeft = '-48px';
    plugin.front('console_window');
},

hideConsoleWindow: function(consoleElement, tabsElement) {
    consoleElement.classList.remove('translate-x-0');
    consoleElement.classList.add('-translate-x-full');
    consoleElement.style.marginLeft = '0px';
    tabsElement.style.marginLeft = '407px';
    plugin.front('ui_inventory_window');
},

    activateCurrentTab: function() {
    const tabs = document.querySelectorAll('#console_window .console_tab');
    tabs.forEach(t => t.classList.remove('bg-[#fff]', 'text-white'));
    tabs[this.currentTabIndex].classList.add('bg-[#fff]', 'text-white');
    this.loadTabContent(tabs[this.currentTabIndex].getAttribute('data-tab'));
},

    setupTabListeners: function() {
    const tabs = document.querySelectorAll('#console_window .console_tab');
    tabs.forEach((tab, index) => {
        const listener = () => this.handleTabClick(tab, index);
        tab.addEventListener('click', listener);
        this.eventListeners.push({ element: tab, event: 'click', handler: listener });
    });
},

handleTabClick: function(tab, index) {
    const newTabName = tab.getAttribute('data-tab');
    
    if (this.tab_name && this.tab_name !== newTabName) {
        ui.unmount(`ui_console_${this.tab_name}`);
        console.log(`Unmounting ui_console_${this.tab_name}`);
    }
    
    this.currentTabIndex = index;
    this.tab_name = newTabName;
    
    this.clearActiveTabs();
    tab.classList.add('bg-[#fff]', 'text-white');
    
    if (!this.isOpen) {
        this.toggleConsoleWindow();
    } else {
        this.loadTabContent(newTabName);
    }
},

    loadTabContent: function(target) {
        if (this.tab_name) {
            ui.unmount('ui_console_' + this.tab_name);
            console.log(`Unmounting ui_console_${this.tab_name}`);
        }

        this.tab_name = target;
        const contentDiv = document.getElementById('console_window_content');
        if (contentDiv) {
            contentDiv.innerHTML = ''; 
            ui.ajax({
                method: 'GET',
                url: `plugins/editor/console/tabs/${target}/index.njk`,
                success: function(data) {
                    ui.html(contentDiv, data, 'replace');
                    console.log(target, "loaded successfully");
                },
                error: function(err) {
                    console.error("Failed to load content for tab:", target, err);
                    contentDiv.innerHTML = `<div class="error">Failed to load content. Please try again later.</div>`;
                }
            });
        }
    },

    unmountCurrentTab: function() {
        ui.unmount('ui_console_tab_window');
        console.log("unmounting ui_console_tab_window");
        const contentDiv = document.getElementById('console_window_content');
        if (contentDiv) {
            contentDiv.innerHTML = '';
        }
    },

    clearActiveTabs: function() {
    const tabs = document.querySelectorAll('#console_window .console_tab');
    tabs.forEach(t => t.classList.remove('bg-[#fff]', 'text-white'));
},

    navigateTabs: function(direction) {
    const tabs = document.querySelectorAll('#console_window .console_tab');
    let newIndex = this.currentTabIndex;

    if (direction === 'up') {
        newIndex = (this.currentTabIndex - 1 + tabs.length) % tabs.length;
    } else if (direction === 'down') {
        newIndex = (this.currentTabIndex + 1) % tabs.length;
    }

    if (this.isOpen) {
        this.clearActiveTabs();
        tabs[newIndex].classList.add('bg-[#fff]', 'text-white');
        this.unmountCurrentTab();
        this.loadTabContent(tabs[newIndex].getAttribute('data-tab'));
        this.currentTabIndex = newIndex;
    }
},

    isMenuActive: function() {
        return this.isOpen;
    }
};
  </script>
{% endif %}