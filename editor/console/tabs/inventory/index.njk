{% if auth %}

<!-- Inventory Search and Grid -->
<div class="tabs mb-4 flex items-center space-x-2">
  <!-- Tileset Filter Dropdown -->
  <select id="tileset_filter" class="p-2 rounded text-base text-black border border-gray-300">
    <option value="">All Tilesets</option>
    <!-- Populated by fetchTilesetList() -->
  </select>

  <!-- Existing Search Input -->
  <input id="inventory-search"
         type="text"
         class="p-2 w-full rounded light_input text-base text-black"
         placeholder="Search..."/>
</div>

<button id="btn-new-server"
        class="bg-green-600 hover:bg-green-700 text-white font-bold p-2 rounded shadow-md"
        onclick="plugin.load({ id: 'tileset_manager_window', url: 'plugins/tileset_manager/index.njk'});">
  Tileset Manager
</button>

<!-- Inventory Grid -->
<div id="inventory-grid" class="inventory-grid grid grid-cols-5 gap-1 mt-2">
  <!-- Items will be appended here dynamically -->
</div>

<script>
var ui_console_editor_inventory = {
  selectedInventoryItem: null,
  selectedInventoryItemPos: { x: 0, y: 0 },
  isDragging: false,
  itemData: null, // Store item data for filtering

  // We'll keep track of the user's chosen tileset and search input:
  currentSearchTerm: '',
  currentTilesetFilter: '',

  start: function() {
    this.itemData = assets.use('objectData');
    this.displayItems();            // Display all items initially
    this.addGlobalListeners();      // Right-click + ESC logic
    this.addSearchListener();       // Listen for text search
    this.fetchTilesetList();        // Populate the tileset <select>
  },

  // 1. Fetch the list of tilesets from your backend (just like Tileset Manager).
  // 2. Populate the #tileset_filter dropdown.
  fetchTilesetList: function() {
    const tilesetSelect = document.getElementById('tileset_filter');
    fetch('/api/tileset_manager/list_sheets')
      .then(res => res.json())
      .then(json => {
        if (!json.success) {
          console.warn('Error loading sheets:', json.message);
          return;
        }
        const sheets = json.sheets || [];
        sheets.forEach(sheetName => {
          const option = document.createElement('option');
          option.value = sheetName;
          option.textContent = sheetName;
          tilesetSelect.appendChild(option);
        });
        // Add an event listener so that changes to the dropdown also filter the items
        tilesetSelect.addEventListener('change', (event) => {
          this.currentTilesetFilter = event.target.value; // store new tileset
          this.filterItems(this.currentSearchTerm, this.currentTilesetFilter);
        });
      })
      .catch(err => {
        console.error('Error fetching tileset list:', err);
      });
  },

  // The original display logic, with optional filtered data
  displayItems: function(filteredData = null) {
    const itemData = filteredData || this.itemData;
    const gridContainer = document.querySelector('#inventory-grid');
    const tileSize = 16;
    const tilesPerRow = 150;

    gridContainer.innerHTML = ''; // Clear existing items

    for (let category in itemData) {
      if (!itemData.hasOwnProperty(category)) continue;
      const items = itemData[category];
      if (!items || items.length === 0) continue;

      const itemGroupElement = document.createElement('div');
      itemGroupElement.classList.add(
        'inventory-item-group',
        'bg-gray-700',
        'rounded',
        'shadow-lg',
        'hover:bg-gray-600',
        'transition',
        'duration-300',
        'p-2'
      );

      items.forEach(item => {
        const tilesetImage = assets.use(item.t); // Load tileset image
        if (!tilesetImage) return;

        const itemCanvas = document.createElement('canvas');
        const ctx = itemCanvas.getContext('2d');

        const maxCol = item.a;
        const maxRow = item.b;
        itemCanvas.width = (maxCol + 1) * tileSize;
        itemCanvas.height = (maxRow + 1) * tileSize;

        let framesToRender = [];

        if (item.d && Array.isArray(item.i[0])) {
          framesToRender = item.i[0];
        } else if (Array.isArray(item.i[0])) {
          framesToRender = item.i.flat();
        } else {
          // flatten ranges, if any
          framesToRender = item.i.map(frame => {
            if (typeof frame === 'string' && frame.includes('-')) {
              return game.parseRange(frame);
            }
            return [frame];
          }).flat();
        }

        framesToRender.forEach((frame, index) => {
          const srcX = (frame % tilesPerRow) * tileSize;
          const srcY = Math.floor(frame / tilesPerRow) * tileSize;

          const destX = (index % (maxCol + 1)) * tileSize;
          const destY = Math.floor(index / (maxCol + 1)) * tileSize;

          ctx.drawImage(
            tilesetImage,
            srcX, srcY, tileSize, tileSize,
            destX, destY, tileSize, tileSize
          );
        });

        // Tag each canvas with the item's category or unique ID
        itemCanvas.setAttribute('data-item-id', category);

        const canvasContainer = document.createElement('div');
        canvasContainer.className = 'flex justify-center items-center w-full h-full max-w-[150px] max-h-[150px] aspect-w-1 aspect-h-1 rounded-lg p-1 transition duration-300 transform hover:scale-125';
        itemCanvas.className += ' w-full h-full object-contain';

        itemCanvas.addEventListener('mousedown', ui_console_editor_inventory.handleMouseDown);

        canvasContainer.appendChild(itemCanvas);
        itemGroupElement.appendChild(canvasContainer);
      });

      gridContainer.appendChild(itemGroupElement);
    }
  },

  // Listen for text changes in the search input
  addSearchListener: function() {
    const searchInput = document.querySelector('#inventory-search');
    searchInput.addEventListener('input', (event) => {
      this.currentSearchTerm = event.target.value.toLowerCase();
      this.filterItems(this.currentSearchTerm, this.currentTilesetFilter);
    });
  },

  // Combine search + tileset filters
  filterItems: function(searchTerm, tilesetFilter) {
    // If we have no data yet, bail out
    if (!this.itemData) return;

    // If both searchTerm == '' and tilesetFilter == '', display everything
    if (!searchTerm && !tilesetFilter) {
      this.displayItems(this.itemData);
      return;
    }

    const filteredData = {};

    // Loop categories
    for (let category in this.itemData) {
      if (!this.itemData.hasOwnProperty(category)) continue;
      const items = this.itemData[category];

      // Filter each item
      const matchingItems = items.filter(item => {
        // 1) Check name match if there's a search term
        const matchesName = searchTerm ? (item.n || '').toLowerCase().includes(searchTerm) : true;
        // 2) Check tileset match if there's a tileset filter
        const matchesTileset = tilesetFilter ? (item.t === tilesetFilter) : true;
        return matchesName && matchesTileset;
      });

      if (matchingItems.length > 0) {
        filteredData[category] = matchingItems;
      }
    }

    this.displayItems(filteredData);
  },

  render: function() {
    const itemData = game.objectData[this.selectedInventoryItem][0];
    if (!itemData) return;

    const objectWidth = (itemData.a + 1) * 16;
    const objectHeight = (itemData.b + 1) * 16;

    let posX = this.selectedInventoryItemPos.x - objectWidth / 2;
    let posY = this.selectedInventoryItemPos.y - objectHeight / 2;

    posX = Math.round(posX);
    posY = Math.round(posY);

    const parseRange = (rangeString) => {
      const [start, end] = rangeString.split('-').map(Number);
      const rangeArray = [];
      for (let i = start; i <= end; i++) {
        rangeArray.push(i);
      }
      return rangeArray;
    };

    let frameIndices = [];
    if (typeof itemData.i[0] === 'string' && itemData.i[0].includes('-')) {
      frameIndices = parseRange(itemData.i[0]);
    } else {
      frameIndices = itemData.i;
    }

    const img = assets.use(itemData.t);
    if (!img) return;

    let frameIndex = 0;
    for (let row = 0; row < itemData.b + 1; row++) {
      for (let col = 0; col < itemData.a + 1; col++) {
        if (frameIndex >= frameIndices.length) break;

        const tileFrameIndex = frameIndices[frameIndex];
        const srcX = (tileFrameIndex % 150) * 16;
        const srcY = Math.floor(tileFrameIndex / 150) * 16;

        const tilePosX = Math.round(posX + col * 16);
        const tilePosY = Math.round(posY + row * 16);

        game.ctx.drawImage(img, srcX, srcY, 16, 16, tilePosX, tilePosY, 16, 16);
        frameIndex++;
      }
    }
  },

  handleMouseDown: function(event) {
    const clickedCanvas = event.currentTarget;
    const itemId = clickedCanvas.getAttribute('data-item-id');

    if (!itemId) {
      console.error("Item ID not found.");
      return;
    }

    ui_console_editor_inventory.stopDragging();

    // Set the selected inventory item and allow continuous placement
    edit_mode_window.isAddingNewObject = true;
    ui_console_editor_inventory.selectedInventoryItem = itemId;
    
    document.addEventListener('mousemove', ui_console_editor_inventory.trackMouseForItem);
    ui_console_editor_inventory.isDragging = true;
  },

  trackMouseForItem: function(event) {
    const rect = game.canvas.getBoundingClientRect();
    const mouseX = (event.clientX - rect.left) / game.zoomLevel + camera.cameraX;
    const mouseY = (event.clientY - rect.top) / game.zoomLevel + camera.cameraY;

    ui_console_editor_inventory.selectedInventoryItemPos.x = mouseX;
    ui_console_editor_inventory.selectedInventoryItemPos.y = mouseY;

    document.addEventListener('mouseup', ui_console_editor_inventory.handleMapClick);
  },

  handleMapClick: function(event) {
    if (event.button === 2) return;  // Prevent right-click from triggering
    if (edit_mode_window.isAddingNewObject) {
      const clonedObjectX = ui_console_editor_inventory.selectedInventoryItemPos.x;
      const clonedObjectY = ui_console_editor_inventory.selectedInventoryItemPos.y;

      if (ui_console_editor_inventory.selectedInventoryItem) {
        const itemData = game.objectData[ui_console_editor_inventory.selectedInventoryItem][0];
        if (!itemData) return;

        const objectWidth = (itemData.a + 1) * 16;
        const objectHeight = (itemData.b + 1) * 16;

        const adjustedMouseX = clonedObjectX - objectWidth / 2;
        const adjustedMouseY = clonedObjectY - objectHeight / 2;

        // Add the item to the room
        ui_console_editor_inventory.addItemToRoomData(ui_console_editor_inventory.selectedInventoryItem, adjustedMouseX, adjustedMouseY);

        // Continue placing the same object
        return;
      }
    }

    // If not placing a new object, handle normal selection or other logic
    this.handleSelectionStart(event);
  },

  stopDragging: function() {
    if (ui_console_editor_inventory.selectedInventoryItem) {
      ui_console_editor_inventory.deselectInventoryItem();
      document.removeEventListener('mousemove', ui_console_editor_inventory.trackMouseForItem);
      document.removeEventListener('mouseup', ui_console_editor_inventory.handleMapClick);
      ui_console_editor_inventory.isDragging = false;
    }
  },

  deselectInventoryItem: function() {
    ui_console_editor_inventory.selectedInventoryItem = null;
    // Re-enable normal selection behavior
    edit_mode_window.isAddingNewObject = false;
  },

  cancelAddingObject: function() {
    // Cancel continuous placement and reset the object
    ui_console_editor_inventory.stopDragging();
    ui_console_editor_inventory.deselectInventoryItem();
    console.log("Object selection cancelled");
  },

  addItemToRoomData: function(itemId, mouseX, mouseY) {
    // Retrieve item data from the game object
    const itemData = game.objectData[itemId] ? game.objectData[itemId][0] : null;
    if (!itemData) {
      console.error("Item data not found for itemId:", itemId);
      return;
    }

    // Determine base position (snap to grid or pixel-perfect)
    let baseX = editor_context_menu_window.isSnapEnabled
      ? Math.floor(mouseX / 16) * 16
      : Math.round(mouseX);

    let baseY = editor_context_menu_window.isSnapEnabled
      ? Math.floor(mouseY / 16) * 16
      : Math.round(mouseY);

    const maxColumns = itemData.a || 0;  // Number of columns (width)
    const maxRows = itemData.b || 0;     // Number of rows (height)

    // Arrays to store the new X and Y positions for each tile
    const newX = [];
    const newY = [];

    // Loop through columns to calculate the X positions
    for (let col = 0; col <= maxColumns; col++) {
      if (editor_context_menu_window.isSnapEnabled) {
        newX.push(Math.floor(baseX / 16) + col);
      } else {
        newX.push((baseX + col * 16) / 16);
      }
    }

    // Loop through rows to calculate the Y positions
    for (let row = 0; row <= maxRows; row++) {
      if (editor_context_menu_window.isSnapEnabled) {
        newY.push(Math.floor(baseY / 16) + row);
      } else {
        newY.push((baseY + row * 16) / 16);
      }
    }

    // Create a new object in the room
    const newItem = {
      id: itemId,
      n: itemData.n,
      x: newX,
      y: newY,
      layer_id: utils.generateId(),
      animationState: [{ currentFrame: 0, elapsedTime: 0 }],
      w: itemData.w || []  // Possibly store width data
    };

    // Ensure roomData exists
    if (!game.roomData.items) {
      game.roomData.items = [];
    }
    game.roomData.items.push(newItem);
    editor_layers.addItemToLayer(newItem);

    console.log(
      'New object added:',
      newItem,
      'with',
      editor_utils_window.isSnapEnabled ? 'grid-snapping' : 'pixel-perfect',
      'placement.'
    );
  },

  unmount: function() {
    ui_console_editor_inventory.stopDragging();
  },

  addGlobalListeners: function() {
    // Right-click to cancel
    document.addEventListener('contextmenu', function(event) {
      event.preventDefault();
      console.log("Right-click detected - calling cancelAddingObject()");
      ui_console_editor_inventory.cancelAddingObject();
    });

    // ESC to cancel
    document.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        console.log("Escape key pressed - calling cancelAddingObject()");
        ui_console_editor_inventory.cancelAddingObject();
      }
    });
  }
};

// Start it up
ui_console_editor_inventory.start();
</script>

{% endif %}
