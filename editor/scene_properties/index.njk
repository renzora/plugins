{% if auth %}
  <div class='window bg-yellow-700' style='width: 330px;'>

    <div data-part='handle' class='window_title bg-yellow-600 text-yellow-100 p-2 rounded-t'>
      <div class='float-right'>
        <button class="icon close_dark mr-1 text-white" aria-label="Close (ESC)" data-close>&times;</button>
      </div>
      <div data-part='title' class='text-yellow-100'>Scene Properties</div>
    </div>
    
    <div class='clearfix'></div>
    
    <div class='relative'>
      <div class='container window_body text-white p-2'>
        
        <label for="sceneWidth" class="block text-sm mb-1">Width: <span id="sceneWidthValue"></span></label>
        <input type="range" id="sceneWidth" min="96" max="5000" step="1" class="w-full mb-4">

        <label for="sceneHeight" class="block text-sm mb-1">Height: <span id="sceneHeightValue"></span></label>
        <input type="range" id="sceneHeight" min="96    " max="2000" step="1" class="w-full mb-4">
            <!-- Save Button -->
    <button id="saveSceneProperties" onclick="scene_properties.save();" class="bg-yellow-500 text-white px-4 py-2 mt-4 rounded hover:bg-yellow-600">
        Save
    </button>
      </div>
    </div>
    </div>

    <script>
scene_properties = {
    start() {
        const widthSlider = document.getElementById('sceneWidth');
        const heightSlider = document.getElementById('sceneHeight');
        const widthValue = document.getElementById('sceneWidthValue');
        const heightValue = document.getElementById('sceneHeightValue');
        const roundToMultiple = (value, multiple) => {
            return Math.round(value / multiple) * multiple;
        };

        if (typeof game !== 'undefined') {
            widthSlider.value = roundToMultiple(game.worldWidth, 16);
            heightSlider.value = roundToMultiple(game.worldHeight, 16);
            widthValue.textContent = widthSlider.value;
            heightValue.textContent = heightSlider.value;
        }

        const updateDimensions = () => {
            let newWidth = roundToMultiple(widthSlider.value, 16);
            let newHeight = roundToMultiple(heightSlider.value, 16);

            widthSlider.value = newWidth;
            heightSlider.value = newHeight;

            if (typeof game !== 'undefined') {
                game.worldWidth = newWidth;
                game.worldHeight = newHeight;
                game.resizeCanvas();
                widthValue.textContent = newWidth;
                heightValue.textContent = newHeight;
            } else {
                console.error("Game object not found");
            }
        };

        widthSlider.addEventListener('input', updateDimensions);
        heightSlider.addEventListener('input', updateDimensions);
    },

save() {
    const width = document.getElementById('sceneWidth').value
    const height = document.getElementById('sceneHeight').value
    const data = {
        sceneId: game.sceneid,
        width: parseInt(width, 10),
        height: parseInt(height, 10)
    }
    fetch('/api/editor/scene/dimensions', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(response => {
        console.log('Scene properties saved successfully:', response)
        plugin.close('scene_properties')
    })
    .catch(error => {
        console.error('Error saving scene properties:', error)
    })
},

    unmount() {

    }
};
    </script>
{% endif %}