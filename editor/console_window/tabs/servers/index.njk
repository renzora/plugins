<div id="console_window_content" class="text-white overflow-y-auto h-full">
  <div class="p-2">
    <button id="btn-new-server" class="bg-green-600 hover:bg-green-700 text-white font-bold p-2 rounded shadow-md">
      New Server
    </button>
    <div id="server-list" class="mt-4 text-white">
      Loading servers...
    </div>
  </div>
</div>

<script>
serverConsole = {
  eventListeners: [],
  deleteModes: {},
  start() {
    this.addListener('btn-new-server', 'click', this.handleCreateServer.bind(this))
    this.loadServers()
  },
  addListener(id, event, handler) {
    const element = document.getElementById(id)
    if (element) {
      element.addEventListener(event, handler)
      this.eventListeners.push({ element, event, handler })
    }
  },
  async fetchData(url, options = {}) {
    try {
      const response = await fetch(url, {
        headers: { 'Content-Type': 'application/json' },
        credentials: 'include',
        ...options
      })
      return await response.json()
    } catch (error) {
      console.error('Fetch error:', error)
      return { message: 'error', error: error.message }
    }
  },
  showError(message, error) {
    console.error(message, error)
    alert(`${message}: ${error || 'Unknown error'}`)
  },
  async handleCreateServer() {
    const res = await this.fetchData('/api/servers/create_server', {
      method: 'POST',
      body: JSON.stringify({})
    })
    if (res.message === 'success') {
      this.addServerToUI(res.server, true)
    } else {
      this.showError('Error creating server', res.error)
    }
  },
  async loadServers() {
    const container = document.getElementById('server-list')
    if (!container) return
    container.innerHTML = 'Loading servers...'
    const res = await this.fetchData('/api/servers/get_servers')
    if (res.message === 'success') {
      container.innerHTML = res.servers.length ? '' : '<div class="text-gray-400">No servers found</div>'
      res.servers.forEach(server => this.addServerToUI(server, false, container))
    } else {
      container.innerHTML = 'Error loading servers'
    }
  },
  addServerToUI(server, prepend, container) {
    const serverList = container || document.getElementById('server-list')
    if (!serverList) return

    const serverItem = document.createElement('div')
    serverItem.className = 'bg-gray-700 border border-gray-600 shadow-md rounded mt-2 mb-4'
    serverItem.innerHTML =
      `<div class="flex items-center justify-between mb-2 px-4 py-2">
        <span class="font-semibold text-lg cursor-text" data-server-id="${server.id}">${server.name}</span>
        <div class="flex items-center space-x-2">
          <button class="bg-green-600 hover:bg-green-700 text-white font-bold py-1 px-2 rounded shadow-md">
            New Scene
          </button>
          <button class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-1 px-2 rounded shadow-md flex items-center justify-center" data-cog-button="true">
            <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20">
              <path d="M10 2a1 1 0 0 1 .993.883L11 3v1.07a6.02 6.02 0 0 1 1.867.78l.76-.438a1 1 0 0 1 1.308.37l.5.866a1 1 0 0 1-.365 1.366l-.76.439c.115.389.186.8.207 1.221h1.143a1 1 0 0 1 .993.883L16 10v1a1 1 0 0 1-.883.993L15 12h-1.143a6.026 6.026 0 0 1-.207 1.221l.76.439a1 1 0 0 1 .365 1.366l-.5.866a1 1 0 0 1-1.308.37l-.76-.438A6.02 6.02 0 0 1 11 16.93V18a1 1 0 0 1-.883.993L10 19a1 1 0 0 1-.993-.883L9 18v-1.07a6.02 6.02 0 0 1-1.867-.78l-.76.438a1 1 0 0 1-1.308-.37l-.5-.866a1 1 0 0 1 .365-1.366l.76-.439A6.026 6.026 0 0 1 5 12.001H3.857A1 1 0 0 1 2.864 11L3 10V9a1 1 0 0 1 .883-.993L4 8h1.143a6.026 6.026 0 0 1 .207-1.221l-.76-.439a1 1 0 0 1-.365-1.366l.5-.866a1 1 0 0 1 1.308-.37l.76.438A6.02 6.02 0 0 1 9 4.07V3a1 1 0 0 1 .883-.993L10 2zm0 5a3 3 0 1 0 2.995 2.824L13 10a3 3 0 0 0-3-3z"/>
            </svg>
          </button>
        </div>
      </div>
      <ul id="scenes-list-${server.id}" class="p-0 m-0 list-none" data-draggable-list="true"></ul>`

    const nameSpan = serverItem.querySelector('span')
    nameSpan.addEventListener('dblclick', (e) => this.handleServerRename(e, server))

    const newSceneBtn = serverItem.querySelector('button')
    newSceneBtn.addEventListener('click', () => this.createScene(server.id))

    const cogBtn = serverItem.querySelector('[data-cog-button]')
    cogBtn.addEventListener('click', () => this.toggleDeleteMode(server.id))

    this.deleteModes[server.id] = false
    prepend ? serverList.prepend(serverItem) : serverList.appendChild(serverItem)
    this.loadScenes(server.id)
  },
  toggleDeleteMode(serverId) {
    this.deleteModes[serverId] = !this.deleteModes[serverId]
    const scenesList = document.getElementById(`scenes-list-${serverId}`)
    if (!scenesList) return
    const deleteButtons = scenesList.querySelectorAll('[data-delete-button]')
    deleteButtons.forEach(btn => {
      if (this.deleteModes[serverId]) {
        btn.classList.remove('hidden')
      } else {
        btn.classList.add('hidden')
      }
    })
  },
  handleServerRename(e, server) {
    const span = e.target
    const oldName = server.name
    const input = document.createElement('input')
    input.type = 'text'
    input.value = oldName
    input.className = 'text-gray-800 px-2 py-1 rounded'
    span.replaceWith(input)
    input.focus()
    input.select()
    let hasSaved = false
    const save = async () => {
      if (hasSaved) return
      hasSaved = true
      const newName = input.value.trim() || oldName
      span.textContent = newName
      input.replaceWith(span)
      if (newName !== oldName) {
        const res = await this.fetchData('/api/servers/edit_server', {
          method: 'POST',
          body: JSON.stringify({ id: server.id, name: newName })
        })
        if (res.message !== 'success') {
          this.showError('Error renaming server', res.error)
          span.textContent = oldName
        }
      }
    }
    const onBlur = () => {
      input.removeEventListener('keydown', onKeyDown)
      save()
    }
    const onKeyDown = (evt) => {
      if (evt.key === 'Enter') {
        evt.preventDefault()
        input.removeEventListener('blur', onBlur)
        save()
      }
    }
    input.addEventListener('blur', onBlur)
    input.addEventListener('keydown', onKeyDown)
  },
  async createScene(serverId) {
    const res = await this.fetchData('/api/scenes/create_scene', {
      method: 'POST',
      body: JSON.stringify({ serverId })
    })
    if (res.message === 'success') {
      const scenesList = document.getElementById(`scenes-list-${serverId}`)
      if (scenesList) {
        this.prependSceneToList(res.scene, scenesList)
        this.makeScenesDraggable(scenesList)
      }
    } else {
      this.showError('Error creating scene', res.error)
    }
  },
  async loadScenes(serverId) {
    const res = await this.fetchData('/api/scenes/scenes', {
      method: 'POST',
      body: JSON.stringify({ serverId })
    })
    const scenesList = document.getElementById(`scenes-list-${serverId}`)
    if (!scenesList) return
    if (res.message === 'success') {
      scenesList.innerHTML = ''
      res.scenes.forEach(scene => this.prependSceneToList(scene, scenesList))
      this.makeScenesDraggable(scenesList)
    } else {
      scenesList.innerHTML = 'Error loading scenes'
    }
  },
  prependSceneToList(scene, list) {
    const li = document.createElement('li')
    li.className = 'odd:bg-gray-900 even:bg-gray-800 px-4 py-2 cursor-move flex items-center justify-between last:rounded-b'
    li.setAttribute('data-scene-id', scene._id)
    li.innerHTML =
      `<span class="flex-grow cursor-text">${scene.name}</span>
       <div class="flex items-center space-x-2">
         <button class="bg-green-600 hover:bg-green-700 text-white font-bold py-1 px-2 rounded shadow-md" data-go-button="true">
           Edit
         </button>
         <button class="bg-red-600 hover:bg-red-700 text-white font-bold py-1 px-2 rounded shadow-md hidden" data-delete-button="true">
           <svg class="h-4 w-4 fill-current" viewBox="0 0 20 20"><path d="M6 2a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v1h3a1 1 0 1 1 0 2h-.306l-1.2 12A2 2 0 0 1 12.5 18h-5a2 2 0 0 1-1.994-1.8l-1.2-12H4a1 1 0 1 1 0-2h3V2zm2 3v9a1 1 0 1 0 2 0V5H8zm4 0v9a1 1 0 1 0 2 0V5h-2z"/></svg>
         </button>
       </div>`

    li.querySelector('span').addEventListener('dblclick', (e) => this.handleSceneRename(e, scene))
    li.querySelector('[data-go-button]').addEventListener('click', () => game.scene(scene._id))
    li.querySelector('[data-delete-button]').addEventListener('click', () => this.handleDeleteScene(scene._id, li))
    list.prepend(li)
  },
  handleSceneRename(e, scene) {
    const span = e.target
    const oldName = scene.name
    const input = document.createElement('input')
    input.type = 'text'
    input.value = oldName
    input.className = 'text-gray-800 px-2 py-1 rounded'
    span.replaceWith(input)
    input.focus()
    input.select()
    let hasSaved = false
    const save = async () => {
      if (hasSaved) return
      hasSaved = true
      const newName = input.value.trim() || oldName
      span.textContent = newName
      input.replaceWith(span)
      if (newName !== oldName) {
        const res = await this.fetchData('/api/scenes/edit_scene', {
          method: 'POST',
          body: JSON.stringify({ sceneId: scene._id, name: newName })
        })
        if (res.message !== 'success') {
          this.showError('Error renaming scene', res.error)
          span.textContent = oldName
        }
      }
    }
    const onBlur = () => {
      input.removeEventListener('keydown', onKeyDown)
      save()
    }
    const onKeyDown = (evt) => {
      if (evt.key === 'Enter') {
        evt.preventDefault()
        input.removeEventListener('blur', onBlur)
        save()
      }
    }
    input.addEventListener('blur', onBlur)
    input.addEventListener('keydown', onKeyDown)
  },
  async handleDeleteScene(sceneId, listItem) {
    const res = await this.fetchData('/api/scenes/delete_scene', {
      method: 'POST',
      body: JSON.stringify({ sceneId })
    })
    if (res.message === 'success') {
      listItem.remove()
    } else {
      this.showError('Error deleting scene', res.error)
    }
  },
  makeScenesDraggable(list) {
    let draggedItem = null
    list.querySelectorAll('li').forEach(item => {
      item.draggable = true
      item.addEventListener('dragstart', () => {
        draggedItem = item
        item.classList.add('opacity-50')
      })
      item.addEventListener('dragend', () => {
        item.classList.remove('opacity-50')
        draggedItem = null
      })
    })
    list.addEventListener('dragover', (e) => {
      e.preventDefault()
      const afterElement = this.getDragAfterElement(list, e.clientY)
      const currentItem = draggedItem
      if (!currentItem) return
      if (!afterElement) {
        list.appendChild(currentItem)
      } else {
        list.insertBefore(currentItem, afterElement)
      }
    })
    list.addEventListener('drop', async (e) => {
      e.preventDefault()
      if (!draggedItem) return
      const sceneId = draggedItem.dataset.sceneId
      const oldServerId = draggedItem.closest('ul').id.split('-')[2]
      const newServerId = list.id.split('-')[2]
      if (oldServerId === newServerId) {
        const sceneIds = Array.from(list.children).map(li => li.dataset.sceneId)
        const res = await this.fetchData('/api/scenes/reorder_scenes', {
          method: 'POST',
          body: JSON.stringify({ serverId: oldServerId, orderedSceneIds: sceneIds })
        })
        if (res.message !== 'success') {
          this.showError('Error saving scene order', res.error)
          this.loadScenes(oldServerId)
        }
      } else {
        const moveRes = await this.fetchData('/api/scenes/move_scene', {
          method: 'POST',
          body: JSON.stringify({ sceneId, newServerId })
        })
        if (moveRes.message !== 'success') {
          this.showError('Error moving scene', moveRes.error)
          this.loadScenes(oldServerId)
          this.loadScenes(newServerId)
          return
        }
        const sceneIds = Array.from(list.children).map(li => li.dataset.sceneId)
        const reorderRes = await this.fetchData('/api/scenes/reorder_scenes', {
          method: 'POST',
          body: JSON.stringify({ serverId: newServerId, orderedSceneIds: sceneIds })
        })
        if (reorderRes.message !== 'success') {
          this.showError('Error saving scene order in new server', reorderRes.error)
        }
        this.loadScenes(oldServerId)
        this.loadScenes(newServerId)
      }
    })
  },
  getDragAfterElement(container, y) {
    const draggableElements = [...container.querySelectorAll('li:not(.opacity-50)')]
    return draggableElements.reduce((closest, child) => {
      const box = child.getBoundingClientRect()
      const offset = y - box.top - box.height / 2
      if (offset < 0 && offset > closest.offset) {
        return { offset, element: child }
      } else {
        return closest
      }
    }, { offset: Number.NEGATIVE_INFINITY }).element
  },
  cleanup() {
    this.eventListeners.forEach(({ element, event, handler }) => {
      element.removeEventListener(event, handler)
    })
    this.eventListeners = []
  }
}
serverConsole.start()
</script>
