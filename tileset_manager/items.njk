{% if auth %}
  <div class='window window_bg' style='width: 700px; background: #60975c;'>
    <div data-part='handle' class='window_title' style='background-image: radial-gradient(#406d3d 1px, transparent 0) !important;'>
      <div class='float-right'>
        <button class="icon close_dark mr-1 hint--left" aria-label="Close (ESC)" onclick="tileset_item_editor_window.unmount()" data-close></button>
      </div>
      <div data-part='title' class='title_bg window_border' style='background: #60975c; color: #ede8d6;'>Item Editor</div>
    </div>
    <div class='clearfix'></div>
    <div class='relative'>
      <div class='container text-light window_body p-2'>
        <div id="item_editor_tabs">
          <div class="mb-2 text-gray-800">Click on the grid to draw straight lines. Connect the lines to form a polygon.</div>

          <button id="clear_polygon_button" class="p-2 bg-red-500 text-white rounded mb-4">Clear Polygon</button>
          <div class="mt-4 relative flex justify-center items-center">
            <div class="relative">
              <canvas id="item_grid_background_canvas_walkable" class="absolute inset-0 pointer-events-none"></canvas>
              <canvas id="item_preview_canvas_walkable" class="block mx-auto"></canvas>
              <canvas id="item_grid_canvas_walkable" class="absolute inset-0"></canvas>
            </div>
          </div>

          <button id="save_button" class="mt-4 p-2 bg-green-500 text-white rounded">Save</button>
        </div>
      </div>
      <div class='resize-handle'></div>
    </div>
  </div>

  <script>
    window[id] = {
        id: id,
        itemId: null,
        walkableData: {},
        polygonPoints: [],
        isResizing: false,
        currentlyResizingPoint: null,

        start(itemId) {
            this.itemId = itemId;
            console.log("Item Editor plugin Opened for item ID:", itemId);
            if (!game.objectData.hasOwnProperty(itemId)) {
                console.error("Item ID not found in game.objectData:", itemId);
                return;
            }
            var item = game.objectData[itemId][0];
            console.log("Loaded item data:", item);
            if (!item) {
                console.error("Item not found or is invalid!");
                return;
            }

            console.log("Current 'w' (collision) data:", item.w || "No collision data available");

            this.initializeOtherData(itemId, item);

            this.setupLineDrawingHandlers('item_grid_canvas_walkable');
            this.renderPolygonOnLoad(item);
            if (item && Array.isArray(item.a) && Array.isArray(item.b)) {
                this.drawGrid('item_grid_background_canvas_walkable', item, false, 10);
            } else {
                console.warn("Skipping background grid drawing due to invalid item data");
            }
        },

        initializeOtherData(itemId, item) {
            this.walkableData = this.initializeWalkableData(item);
            this.polygonPoints = [...this.walkableData.polygon];

            this.renderItemPreview(item, 'item_preview_canvas_walkable', 10);
            this.renderPolygonOnLoad(item);
            this.drawGrid('item_grid_canvas_walkable', item, false, 10);

            document.getElementById('save_button').addEventListener('click', this.saveData.bind(this, itemId));
            document.getElementById('clear_polygon_button').addEventListener('click', this.clearPolygon.bind(this));
        },

        setupLineDrawingHandlers(canvasId) {
    var canvas = document.getElementById(canvasId);
    var ctx = canvas.getContext('2d');
    const tileSize = 16;
    const scaleFactor = this.getScaleFactor(canvas);

    this.polygonPoints = [];
    this.isDrawing = false;
    this.isResizing = false;
    this.isDragging = false;
    this.mouseDownPosition = { x: 0, y: 0 };

    canvas.addEventListener('contextmenu', (event) => {
        event.preventDefault();
        this.removePoint(event, canvas, scaleFactor);
    });

    canvas.addEventListener('mousedown', (event) => {
        this.mouseDownPosition = {
            x: event.clientX,
            y: event.clientY
        };
        this.isDragging = false;
        this.startResizing(canvas, event);
    });

    canvas.addEventListener('mousemove', (event) => {
        const deltaX = Math.abs(event.clientX - this.mouseDownPosition.x);
        const deltaY = Math.abs(event.clientY - this.mouseDownPosition.y);
        const movementThreshold = 0;

        if (deltaX > movementThreshold || deltaY > movementThreshold) {
            this.isDragging = true;
            this.resizePoint(canvas, event);
        }
    });

    canvas.addEventListener('mouseup', (event) => {
        this.stopResizing();
        if (!this.isDragging) {
            this.addPoint(event, canvas, ctx, scaleFactor);
        }
    });
},

        addPoint(event, canvas, ctx, scaleFactor) {
            const padding = 10;
            let rawX = (event.clientX - canvas.getBoundingClientRect().left) / scaleFactor;
            let rawY = (event.clientY - canvas.getBoundingClientRect().top) / scaleFactor;

            let x = Math.round(rawX) - padding;
            let y = Math.round(rawY) - padding;

            if (this.polygonPoints.length > 0) {
                const lastPoint = this.polygonPoints[this.polygonPoints.length - 1];

                const dx = Math.abs(x - lastPoint.x);
                const dy = Math.abs(y - lastPoint.y);

                if (dx > dy) {
                    y = lastPoint.y;
                } else if (dy > dx) {
                    x = lastPoint.x;
                } else {
                    const signX = x > lastPoint.x ? 1 : -1;
                    const signY = y > lastPoint.y ? 1 : -1;
                    x = lastPoint.x + signX * dx;
                    y = lastPoint.y + signY * dy;
                }
            }

            this.polygonPoints.push({ x, y });
            this.renderPolygon(ctx, [...this.walkableData.polygon, this.polygonPoints], padding);
            this.addResizeHandles(ctx, padding);
            this.updateGameObjectData();
        },

        removePoint(event, canvas, scaleFactor) {
            const padding = 10;
            let rawX = (event.clientX - canvas.getBoundingClientRect().left) / scaleFactor;
            let rawY = (event.clientY - canvas.getBoundingClientRect().top) / scaleFactor;

            let x = Math.round(rawX) - padding;
            let y = Math.round(rawY) - padding;

            let closestPointIndex = null;
            let minDistance = Infinity;

            for (let i = 0; i < this.polygonPoints.length; i++) {
                const point = this.polygonPoints[i];
                const distance = Math.sqrt(Math.pow(point.x - x, 2) + Math.pow(point.y - y, 2));

                if (distance < minDistance) {
                    minDistance = distance;
                    closestPointIndex = i;
                }
            }

            if (closestPointIndex !== null && minDistance < 10) {
                this.polygonPoints.splice(closestPointIndex, 1);
                this.updatePolygon();
                this.updateGameObjectData();
            }
        },

        renderPolygonOnLoad(item) {
            const canvas = document.getElementById('item_grid_canvas_walkable');
            const ctx = canvas.getContext('2d');
            const padding = 10;

            if (this.walkableData.polygon.length > 0) {
                this.renderPolygon(ctx, [this.walkableData.polygon], padding);
                this.addResizeHandles(ctx, padding);
            }
        },

        clearPolygon() {
        this.walkableData.polygon = [];
        this.polygonPoints = [];

        const canvas = document.getElementById('item_grid_canvas_walkable');
        const ctx = canvas.getContext('2d');
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        game.objectData[this.itemId][0].w = []; // Use this.itemId here

        console.log('Polygon data cleared');
    },

        addResizeHandles(ctx, padding = 0) {
            ctx.fillStyle = 'blue';
            const handleRadius = 4;

            this.polygonPoints.forEach(point => {
                ctx.beginPath();
                ctx.arc(point.x + padding, point.y + padding, handleRadius, 0, 2 * Math.PI);
                ctx.fill();
            });
        },

        stopResizing() {
        this.isResizing = false;
        this.currentlyResizingPoint = null;
        game.objectData[this.itemId][0].w = [...this.walkableData.polygon, ...this.polygonPoints]; // Use this.itemId here
    },

        resizePoint(canvas, event) {
            if (!this.isResizing || !this.currentlyResizingPoint) return;

            const scaleFactor = this.getScaleFactor(canvas);
            const padding = 10;

            let rawX = (event.clientX - canvas.getBoundingClientRect().left) / scaleFactor;
            let rawY = (event.clientY - canvas.getBoundingClientRect().top) / scaleFactor;

            let x = Math.round(rawX) - padding;
            let y = Math.round(rawY) - padding;

            this.currentlyResizingPoint.x = x;
            this.currentlyResizingPoint.y = y;

            this.updatePolygon();
            this.updateGameObjectData();
        },

        stopResizing() {
            this.isResizing = false;
            this.currentlyResizingPoint = null;
            game.objectData[<?php echo json_encode($itemId); ?>][0].w = [...this.walkableData.polygon, ...this.polygonPoints];
        },

        updatePolygon() {
            const canvas = document.getElementById('item_grid_canvas_walkable');
            const ctx = canvas.getContext('2d');
            const padding = 10;

            this.renderPolygon(ctx, [...this.walkableData.polygon, this.polygonPoints], padding);
            this.addResizeHandles(ctx, padding);
            this.updateGameObjectData();
        },

        renderPolygon(ctx, polygons, padding = 0) {
            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

            polygons.forEach(path => {
                if (path.length === 0) return;
                ctx.beginPath();
                ctx.moveTo(path[0].x + padding, path[0].y + padding);
                for (let i = 1; i < path.length; i++) {
                    ctx.lineTo(path[i].x + padding, path[i].y + padding);
                }
                ctx.closePath();
                ctx.strokeStyle = 'rgba(255, 0, 0, 1)';
                ctx.stroke();
                ctx.fillStyle = 'rgba(255, 0, 0, 0.6)';
                ctx.fill();
            });

            this.addResizeHandles(ctx, padding);
        },

        getScaleFactor(canvas) {
            const pluginWidth = document.querySelector('[data-window="tileset_item_editor_window"]').clientWidth;
            const maxCanvasWidth = pluginWidth - 40;
            return Math.min(5, maxCanvasWidth / canvas.width);
        },

        renderItemPreview(item, canvasId, padding = 10) {
            var canvas = document.getElementById(canvasId);
            var ctx = canvas.getContext('2d');
            const tileSize = 16;
            const tilesPerRow = 150;

            canvas.width = (item.a + 1) * tileSize + padding * 2;
            canvas.height = (item.b + 1) * tileSize + padding * 2;

            var tilesetImage = assets.use(item.t);

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            function parseRange(range) {
                const [start, end] = range.split('-').map(Number);
                const frames = [];
                for (let i = start; i <= end; i++) {
                    frames.push(i);
                }
                return frames;
            }

            let framesToRender = [];

            if (Array.isArray(item.i)) {
                framesToRender = item.i.flatMap(frame => typeof frame === 'string' && frame.includes('-') ? parseRange(frame) : frame);
            } else {
                framesToRender = [item.i];
            }

            framesToRender.forEach((frame, index) => {
                const srcX = (frame % tilesPerRow) * tileSize;
                const srcY = Math.floor(frame / tilesPerRow) * tileSize;

                const destX = padding + (index % (item.a + 1)) * tileSize;
                const destY = padding + Math.floor(index / (item.a + 1)) * tileSize;

                ctx.drawImage(
                    tilesetImage,
                    srcX, srcY, tileSize, tileSize,
                    destX, destY, tileSize, tileSize
                );
            });

            const scaleFactor = this.getScaleFactor(canvas);
            canvas.style.width = (canvas.width * scaleFactor) + 'px';
            canvas.style.height = (canvas.height * scaleFactor) + 'px';
        },

        drawGrid(canvasId, item, skipGridLines = false, padding = 10) {
            var canvas = document.getElementById(canvasId);
            var ctx = canvas.getContext('2d');
            const tileSize = 16;

            if (!item || (!Array.isArray(item.a) && typeof item.a !== 'number') || (!Array.isArray(item.b) && typeof item.b !== 'number')) {
                console.error('Invalid item data:', item);
                return;
            }

            const maxCol = Array.isArray(item.a) ? Math.max(...item.a) + 1 : item.a + 1;
            const maxRow = Array.isArray(item.b) ? Math.max(...item.b) + 1 : item.b + 1;
            canvas.width = maxCol * tileSize + padding * 2;
            canvas.height = maxRow * tileSize + padding * 2;

            ctx.clearRect(0, 0, canvas.width, canvas.height);

            ctx.strokeStyle = 'blue';
            ctx.lineWidth = 3;
            ctx.strokeRect(padding, padding, canvas.width - padding * 2, canvas.height - padding * 2);

            if (!skipGridLines) {
                ctx.strokeStyle = 'rgba(136, 136, 136, 1)';
                ctx.lineWidth = 1;

                for (let x = padding + 0.5; x <= canvas.width - padding; x += tileSize) {
                    ctx.beginPath();
                    ctx.moveTo(x, padding + 0.5);
                    ctx.lineTo(x, canvas.height - padding);
                    ctx.stroke();
                }

                for (let y = padding + 0.5; y <= canvas.height - padding; y += tileSize) {
                    ctx.beginPath();
                    ctx.moveTo(padding + 0.5, y);
                    ctx.lineTo(canvas.width - padding, y);
                    ctx.stroke();
                }
            }

            const scaleFactor = this.getScaleFactor(canvas);
            canvas.style.width = (canvas.width * scaleFactor) + 'px';
            canvas.style.height = (canvas.height * scaleFactor) + 'px';
        },

        initializeWalkableData(item) {
            let walkableData = {};

            if (Array.isArray(item.walkablePolygon)) {
                walkableData.polygon = item.walkablePolygon.map(p => ({ x: p[0], y: p[1] }));
            } else if (item.w && Array.isArray(item.w)) {
                walkableData.polygon = item.w;
            } else {
                walkableData.polygon = [];
            }

            return walkableData;
        },

        updateGameObjectData() {
    // Add check to ensure game.objectData[this.itemId] exists
    if (game.objectData[this.itemId] && game.objectData[this.itemId][0]) {
        const item = game.objectData[this.itemId][0];
        item.w = [...this.walkableData.polygon, ...this.polygonPoints];
    } else {
        console.error('Invalid item data for ID:', this.itemId);
    }
},

    saveData() { // Remove itemId parameter since we store it in the object
        var item = game.objectData[this.itemId][0]; // Use this.itemId here
        item.w = this.walkableData.polygon.concat(this.polygonPoints);
        
        console.log("Walkable data saved:", item.w);

        ui.ajax({
            method: 'POST',
            url: '/api/tileset_manager/save_item',
            data: JSON.stringify(game.objectData),
            outputType: 'json',
            success(response) {
                if (response.success) {
                    ui.notif("Data saved successfully!");
                } else {
                    ui.notif("Error saving data: " + response.message, "error");
                    console.error('Server returned an error:', response.message);
                }
            },
            error(err) {
                console.error('Failed to save data:', err);
                err.text().then(text => {
                    console.error('Response from server:', text);
                    ui.notif("Failed to save data. See console for details.", "error");
                });
            }
        });
    },

        unmount() {
            console.log("Unmounting Item Editor plugin");
            var pluginElement = document.querySelector('[data-window="tileset_item_editor_window"]');
            if (pluginElement) {
                pluginElement.remove();
            }
        }
    };

    tileset_item_editor_window.start(<?php echo json_encode($itemId); ?>);
  </script>
{% end if %}